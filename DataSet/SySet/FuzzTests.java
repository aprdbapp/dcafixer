package apps;
import com.pholser.junit.quickcheck.From;
import org.junit.runner.RunWith;
//import com.pholser.junit.quickcheck.*;
//import com.pholser.junit.quickcheck.generator.*;
import edu.berkeley.cs.jqf.fuzz.*;
import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;


@RunWith(JQF.class)
public class AppsFuzzer {
	static final String JDBC_DRIVER = ConnUtil.JDBC_DRIVER;
	static final String DB_URL = ConnUtil.DB_URL;
	static final String DB_UN = ConnUtil.DB_UN;
	static final String DB_PW = ConnUtil.DB_PW;
	
	@Fuzz
	public void Dummy_before_386_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_386.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3126_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3126.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2737_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2737.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1818_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1818.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2367_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2367.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2672_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2672.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2388_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2388.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2222_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2222.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3063_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3063.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_739_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_739.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3433_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3433.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_369_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_369.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_693_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_693.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_943_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_943.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2808_test(@From(SqlInjectonGenerator.class) String percentage ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(percentage +", "+" is/are the input to perform SQLi", Dummy_before_2808.sendRequest(conn, percentage ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1727_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1727.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_410_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_410.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1377_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1377.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1398_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1398.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_105_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_105.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1662_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1662.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_555_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_555.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1232_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1232.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_806_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_806.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2330_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2330.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2760_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2760.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3521_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3521.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_781_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_781.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3171_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3171.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3464_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3464.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1459_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1459.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_294_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_294.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3034_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3034.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1009_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1009.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2275_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2275.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2625_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2625.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_447_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_447.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1320_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1320.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1770_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1770.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_914_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_914.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2449_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2449.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_851_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_851.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2019_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2019.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_502_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_502.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1265_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1265.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3258_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3258.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_152_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_152.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1635_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1635.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_8_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_8.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3167_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3167.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_797_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_797.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1859_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1859.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2776_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2776.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2326_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2326.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2633_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2633.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2263_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2263.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2799_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2799.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_778_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_778.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3022_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3022.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_282_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_282.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_328_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_328.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3472_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3472.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3188_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3188.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_902_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_902.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1766_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1766.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2849_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2849.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1336_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1336.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_451_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_451.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1623_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1623.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_144_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_144.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1789_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1789.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1273_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1273.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_514_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_514.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_847_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_847.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2371_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2371.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2721_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2721.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3130_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3130.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_390_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_390.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_685_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_685.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1418_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1418.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3425_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3425.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1048_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1048.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3075_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3075.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2234_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2234.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2664_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2664.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1361_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1361.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_406_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_406.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1731_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1731.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_955_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_955.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2408_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2408.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2058_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2058.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_810_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_810.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3219_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3219.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1224_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1224.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_543_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_543.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1674_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1674.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_113_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_113.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1199_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1199.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1463_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1463.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_304_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_304.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1033_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1033.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_754_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_754.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1930_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1930.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1875_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1875.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1526_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1526.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_241_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_241.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1176_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1176.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_611_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_611.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2473_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2473.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2189_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2189.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2023_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2023.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_538_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_538.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3262_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3262.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_168_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_168.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2920_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2920.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_492_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_492.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_187_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_187.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3327_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3327.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2865_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2865.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_884_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_884.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_37_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_37.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2536_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2536.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2166_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2166.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1967_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1967.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2648_test(@From(SqlInjectonGenerator.class) String countryLength ,@From(SqlInjectonGenerator.class) String countryName ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(countryLength +", "+countryName +", "+" is/are the input to perform SQLi", Dummy_before_2648.sendRequest(conn, countryLength ,countryName ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2218_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2218.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1064_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1064.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3059_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3059.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_703_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_703.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1434_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1434.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3409_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3409.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_353_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_353.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1121_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1121.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_646_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_646.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1571_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1571.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_216_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_216.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1822_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1822.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1988_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1988.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1658_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1658.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2977_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_2977.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3235_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3235.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1208_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1208.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2074_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2074.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_996_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_996.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2424_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2424.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_979_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_979.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2131_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2131.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_60_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_60.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2561_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2561.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2832_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2832.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_580_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_580.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3370_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3370.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2998_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2998.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_345_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_345.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1422_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1422.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1588_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1588.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_715_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_715.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1072_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1072.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1971_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1971.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1834_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1834.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_200_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_200.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1567_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1567.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_650_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_650.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1137_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1137.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2432_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2432.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_980_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_980.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2062_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2062.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2598_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2598.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_99_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_99.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3223_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3223.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_579_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_579.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2961_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2961.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_129_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_129.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3389_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3389.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3366_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3366.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_596_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_596.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2824_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2824.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2577_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2577.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_76_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_76.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2127_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2127.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2609_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2609.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1926_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1926.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2259_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2259.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_742_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_742.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3018_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3018.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1025_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1025.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_312_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_312.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3448_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3448.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1475_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1475.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_607_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_607.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1160_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1160.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_257_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_257.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1530_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1530.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1863_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1863.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_484_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_484.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2936_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2936.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1619_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1619.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1249_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1249.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3274_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3274.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2035_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2035.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2465_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2465.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2170_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2170.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_938_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_938.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2520_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2520.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_21_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_21.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_892_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_892.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2873_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2873.sendRequest(conn, id ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3331_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3331.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_191_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_191.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1681_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1681.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3346_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3346.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2804_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_2804.sendRequest(conn, id ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2557_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2557.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_56_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_56.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2107_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2107.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2412_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2412.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2042_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2042.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3203_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3203.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_559_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_559.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2941_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2941.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_109_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_109.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1394_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1394.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2691_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2691.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1814_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1814.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_220_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_220.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1547_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1547.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3080_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3080.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_670_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_670.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1117_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1117.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_365_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_365.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1402_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1402.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_735_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_735.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1052_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1052.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2384_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2384.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1951_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1951.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2150_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2150.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_918_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_918.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2500_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2500.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2853_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2853.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1286_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1286.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3311_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3311.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2916_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2916.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1639_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1639.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1793_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1793.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3254_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3254.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1269_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1269.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2015_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2015.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2445_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2445.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3487_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3487.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_627_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_627.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1140_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1140.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_277_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_277.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1510_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1510.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2296_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2296.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1843_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1843.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2629_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2629.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1906_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1906.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2279_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2279.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2783_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2783.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_762_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_762.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1005_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_1005.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3038_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3038.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_298_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_298.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_332_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_332.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1455_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1455.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3468_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3468.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3192_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3192.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3307_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3307.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1290_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1290.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2845_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2845.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_17_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_17.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2516_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2516.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2146_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2146.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2453_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2453.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2003_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2003.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_518_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_518.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3242_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3242.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1785_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1785.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_148_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_148.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2900_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2900.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1855_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1855.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2280_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2280.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1506_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1506.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_261_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_261.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1156_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1156.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_631_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_631.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3491_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3491.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_4_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_4.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3184_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3184.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1443_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1443.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_324_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_324.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1013_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1013.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_774_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_774.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2795_test(@From(SqlInjectonGenerator.class) String GPA ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+" is/are the input to perform SQLi", Dummy_before_2795.sendRequest(conn, GPA ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1910_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1910.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_959_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_959.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2111_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2111.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_40_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_40.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2541_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2541.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2812_test(@From(SqlInjectonGenerator.class) String percentage ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(percentage +", "+" is/are the input to perform SQLi", Dummy_before_2812.sendRequest(conn, percentage ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3350_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3350.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1697_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1697.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1382_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1382.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1678_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1678.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2957_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2957.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1228_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1228.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3215_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3215.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2054_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2054.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2404_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2404.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1101_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1101.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_666_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_666.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3096_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3096.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1551_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1551.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_236_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_236.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1802_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1802.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2687_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2687.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1947_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1947.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2668_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2668.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2392_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2392.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2238_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2238.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3079_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3079.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1044_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1044.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_723_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_723.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3429_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3429.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1414_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1414.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_373_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_373.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_689_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_689.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1603_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1603.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_164_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_164.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2886_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2886.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1253_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1253.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_534_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_534.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_867_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_867.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2185_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2185.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_922_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_922.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2490_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2490.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_888_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_888.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1746_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1746.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2869_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2869.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3281_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3281.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1316_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1316.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_471_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_471.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2613_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2613.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2243_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2243.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1896_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1896.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_758_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_758.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3002_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3002.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_308_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_308.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3452_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3452.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1195_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1195.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1480_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1480.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3147_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3147.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3517_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3517.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1879_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1879.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2756_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2756.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2306_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2306.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2428_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2428.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2078_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2078.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_830_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_830.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_83_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_83.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2582_test(@From(SqlInjectonGenerator.class) String department ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(department +", "+" is/are the input to perform SQLi", Dummy_before_2582.sendRequest(conn, department ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1204_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1204.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3239_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3239.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_563_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_563.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1654_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1654.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_133_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_133.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3393_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3393.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2994_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2994.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1341_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1341.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_426_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_426.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1711_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1711.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2097_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2097.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_975_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_975.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3405_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3405.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1438_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1438.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1592_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1592.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3055_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3055.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1068_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1068.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2214_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2214.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2644_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2644.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2351_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2351.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1984_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1984.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2701_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2701.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1087_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1087.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3110_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3110.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3385_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3385.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_125_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_125.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1642_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1642.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_575_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_575.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1212_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1212.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2594_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2594.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_95_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_95.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_826_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_826.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_963_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_963.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2081_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2081.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2828_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2828.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1707_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1707.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_430_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_430.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1357_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1357.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2982_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2982.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2652_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2652.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2202_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2202.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3043_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3043.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_719_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_719.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1584_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1584.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3413_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3413.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_349_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_349.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3106_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3106.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1091_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1091.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2717_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2717.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1838_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1838.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1992_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1992.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2347_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2347.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2469_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2469.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2193_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2193.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_871_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_871.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2039_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2039.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_522_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_522.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3278_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3278.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1245_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1245.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2890_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2890.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_172_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_172.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1615_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1615.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_488_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_488.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_467_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_467.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1300_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1300.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3297_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3297.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1750_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1750.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2486_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2486.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_934_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_934.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1183_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1183.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1479_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1479.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3444_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3444.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1029_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1029.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3014_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3014.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1880_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1880.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2255_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2255.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2605_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2605.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2310_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2310.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2740_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2740.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3501_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3501.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3151_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3151.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1496_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1496.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1182_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1182.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3445_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3445.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1478_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1478.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3015_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3015.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1028_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1028.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1881_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1881.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2254_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2254.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2604_test(@From(SqlInjectonGenerator.class) String department ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(department +", "+" is/are the input to perform SQLi", Dummy_before_2604.sendRequest(conn, department ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2311_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2311.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2741_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2741.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3500_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3500.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3150_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3150.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1497_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1497.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2468_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2468.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2192_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2192.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2038_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2038.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_870_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_870.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1244_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1244.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3279_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3279.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_523_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_523.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2891_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2891.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1614_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1614.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_173_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_173.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_489_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_489.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1301_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1301.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_466_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_466.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3296_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3296.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1751_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1751.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2487_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2487.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_935_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_935.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2653_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2653.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2203_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2203.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_718_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_718.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3042_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3042.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1585_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1585.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_348_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_348.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3412_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3412.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3107_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3107.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1090_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1090.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2716_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2716.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1839_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1839.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1993_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1993.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2346_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2346.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3384_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3384.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1643_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1643.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_124_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_124.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1213_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1213.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_574_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_574.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2595_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2595.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_94_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_94.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_827_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_827.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_962_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_962.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2080_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2080.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2829_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2829.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1706_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1706.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1356_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1356.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_431_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_431.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2983_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2983.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1439_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1439.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3404_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3404.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1593_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1593.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1069_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1069.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3054_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3054.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2215_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2215.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2645_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2645.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2350_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2350.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1985_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1985.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2700_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2700.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1086_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1086.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3111_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3111.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2429_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2429.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_831_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_831.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2079_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2079.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_82_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_82.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2583_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2583.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_562_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_562.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3238_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3238.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1205_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1205.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_132_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_132.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1655_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1655.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3392_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3392.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2995_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2995.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_427_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_427.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1340_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1340.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1710_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1710.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2096_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2096.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_974_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_974.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2612_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2612.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2242_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2242.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1897_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1897.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3003_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3003.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_759_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_759.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3453_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3453.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_309_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_309.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1194_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1194.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1481_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1481.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3146_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3146.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3516_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3516.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1878_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1878.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2757_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2757.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2307_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2307.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_165_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_165.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1602_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1602.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2887_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2887.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_535_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_535.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1252_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1252.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_866_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_866.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2184_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2184.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_923_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_923.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2491_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2491.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_889_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_889.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1747_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1747.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2868_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2868.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3280_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3280.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_470_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_470.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1317_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1317.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_667_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_667.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1100_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1100.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3097_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3097.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_237_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_237.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1550_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1550.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1803_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1803.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2686_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2686.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1946_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1946.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2669_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2669.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2393_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2393.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2239_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2239.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_722_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_722.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1045_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1045.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3078_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3078.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_372_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_372.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1415_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1415.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3428_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3428.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_688_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_688.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2110_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2110.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_958_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_958.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_41_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_41.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2540_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2540.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2813_test(@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2813.sendRequest(conn, jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3351_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3351.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1696_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1696.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1383_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1383.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1679_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1679.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2956_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2956.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3214_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3214.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1229_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1229.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2055_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2055.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2405_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2405.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1854_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1854.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2281_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2281.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_260_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_260.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1507_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1507.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_630_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_630.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1157_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1157.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3490_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3490.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_5_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_5.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3185_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3185.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_325_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_325.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1442_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1442.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_775_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_775.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1012_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1012.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2794_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2794.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1911_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1911.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3306_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3306.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1291_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1291.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2844_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2844.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_16_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_16.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2517_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2517.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2147_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2147.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2452_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2452.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2002_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2002.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3243_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3243.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_519_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_519.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1784_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1784.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2901_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2901.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_149_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_149.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3486_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3486.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1141_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1141.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_626_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_626.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1511_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1511.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_276_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_276.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2297_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2297.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1842_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1842.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2628_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2628.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1907_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1907.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2278_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2278.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2782_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2782.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3039_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3039.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1004_test(@From(SqlInjectonGenerator.class) String DEPTID ,@From(SqlInjectonGenerator.class) String DEPTNAME ,@From(SqlInjectonGenerator.class) String LOCATIONID ,@From(SqlInjectonGenerator.class) String MANAGERID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DEPTID +", "+DEPTNAME +", "+LOCATIONID +", "+MANAGERID +", "+" is/are the input to perform SQLi", Dummy_before_1004.sendRequest(conn, DEPTID ,DEPTNAME ,LOCATIONID ,MANAGERID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_763_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_763.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_299_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_299.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3469_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3469.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1454_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1454.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_333_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_333.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3193_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3193.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_919_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_919.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2151_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2151.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2501_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2501.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2852_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2852.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1287_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1287.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3310_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3310.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2917_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2917.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1638_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1638.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1792_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1792.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1268_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1268.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3255_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3255.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2014_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2014.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2444_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2444.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2690_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2690.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1815_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1815.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1546_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1546.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_221_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_221.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3081_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3081.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1116_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1116.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_671_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_671.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1403_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1403.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_364_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_364.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1053_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1053.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_734_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_734.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2385_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2385.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1950_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1950.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1680_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1680.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3347_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3347.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2805_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_2805.sendRequest(conn, id ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2556_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2556.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_57_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_57.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2106_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2106.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2413_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2413.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2043_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2043.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_558_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_558.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3202_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3202.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_108_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_108.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2940_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2940.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1395_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1395.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_485_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_485.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2937_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2937.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1618_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1618.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3275_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3275.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1248_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1248.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2034_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2034.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2464_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2464.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_939_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_939.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2171_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2171.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2521_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2521.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_20_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_20.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_893_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_893.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2872_test(@From(SqlInjectonGenerator.class) String str ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(str +", "+" is/are the input to perform SQLi", Dummy_before_2872.sendRequest(conn, str ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3330_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3330.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_190_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_190.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2608_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2608.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1927_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1927.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2258_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2258.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1024_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1024.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3019_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3019.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_743_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_743.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1474_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1474.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3449_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3449.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_313_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_313.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1161_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1161.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_606_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_606.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1531_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1531.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_256_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_256.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1862_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1862.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2433_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2433.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_981_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_981.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2063_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2063.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2599_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2599.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_98_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_98.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_578_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_578.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3222_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3222.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_128_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_128.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2960_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2960.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3388_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3388.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3367_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3367.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_597_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_597.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2825_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2825.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2576_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2576.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_77_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_77.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2126_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2126.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1423_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1423.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_344_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_344.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1589_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1589.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1073_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1073.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_714_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_714.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1970_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1970.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1835_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1835.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1566_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1566.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_201_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_201.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1136_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1136.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_651_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_651.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1659_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1659.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2976_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2976.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1209_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1209.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3234_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3234.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2075_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2075.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_997_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_997.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2425_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2425.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2130_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2130.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_978_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_978.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_61_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_61.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2560_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2560.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2833_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2833.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_581_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_581.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3371_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3371.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2999_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2999.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1966_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1966.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2649_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2649.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2219_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2219.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_702_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_702.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3058_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3058.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1065_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1065.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_352_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_352.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3408_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3408.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1435_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1435.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_647_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_647.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1120_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1120.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_217_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_217.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1570_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1570.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1823_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1823.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1989_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1989.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2472_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2472.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2188_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2188.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2022_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2022.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3263_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3263.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_539_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_539.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2921_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2921.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_169_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_169.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_493_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_493.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_186_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_186.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3326_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3326.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2864_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2864.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_885_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_885.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_36_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_36.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2537_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2537.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2167_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2167.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1198_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1198.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_305_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_305.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1462_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1462.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_755_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_755.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1032_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1032.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1931_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1931.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1874_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1874.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_240_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_240.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1527_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1527.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_610_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_610.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1177_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1177.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_407_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_407.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1360_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1360.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1730_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1730.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_954_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_954.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2409_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2409.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_811_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_811.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2059_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2059.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_542_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_542.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1225_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1225.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3218_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3218.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_112_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_112.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1675_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1675.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2370_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2370.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2720_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2720.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3131_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3131.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_391_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_391.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_684_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_684.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3424_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3424.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1419_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1419.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3074_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3074.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1049_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1049.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2235_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2235.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2665_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2665.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_903_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_903.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1767_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1767.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2848_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2848.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_450_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_450.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1337_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1337.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_145_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_145.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1622_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1622.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1788_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1788.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_515_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_515.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1272_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1272.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_846_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_846.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_9_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_9.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3166_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3166.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_796_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_796.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1858_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1858.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2777_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2777.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2327_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2327.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2632_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2632.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2262_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2262.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2798_test(@From(SqlInjectonGenerator.class) String GPA ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+" is/are the input to perform SQLi", Dummy_before_2798.sendRequest(conn, GPA ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3023_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3023.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_779_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_779.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_283_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_283.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3473_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3473.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_329_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_329.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3189_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3189.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1321_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1321.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_446_test(@From(SqlInjectonGenerator.class) String DEPTID ,@From(SqlInjectonGenerator.class) String DEPTNAME ,@From(SqlInjectonGenerator.class) String LOCATIONID ,@From(SqlInjectonGenerator.class) String MANAGERID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DEPTID +", "+DEPTNAME +", "+LOCATIONID +", "+MANAGERID +", "+" is/are the input to perform SQLi", Dummy_before_446.sendRequest(conn, DEPTID ,DEPTNAME ,LOCATIONID ,MANAGERID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1771_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1771.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_915_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_915.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2448_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2448.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2018_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2018.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_850_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_850.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3259_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3259.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1264_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1264.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_503_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_503.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1634_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1634.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_153_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_153.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2331_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2331.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2761_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2761.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3520_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3520.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_780_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_780.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3170_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3170.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1458_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1458.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3465_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3465.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_295_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_295.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1008_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1008.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3035_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3035.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2274_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2274.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2624_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2624.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_942_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_942.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2809_test(@From(SqlInjectonGenerator.class) String percentage ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(percentage +", "+" is/are the input to perform SQLi", Dummy_before_2809.sendRequest(conn, percentage ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1726_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1726.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1376_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1376.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_411_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_411.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1399_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1399.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1663_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1663.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_104_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_104.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1233_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1233.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_554_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_554.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_807_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_807.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_387_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_387.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3127_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3127.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2736_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2736.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1819_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1819.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2366_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2366.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2673_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2673.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2389_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2389.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2223_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2223.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_738_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_738.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3062_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3062.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_368_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_368.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3432_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3432.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_692_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_692.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2551_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2551.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_50_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_50.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2101_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2101.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_949_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_949.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3340_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3340.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1687_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1687.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2802_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2802.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1238_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1238.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3205_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3205.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1392_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1392.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2947_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2947.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1668_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1668.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2414_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2414.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2044_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2044.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3086_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3086.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_226_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_226.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1541_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1541.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_676_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_676.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1111_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1111.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2697_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2697.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1812_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1812.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2228_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2228.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2678_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2678.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1957_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1957.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2382_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2382.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_363_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_363.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3439_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3439.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1404_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1404.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_699_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_699.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_733_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_733.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3069_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3069.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1054_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1054.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1280_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1280.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2855_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2855.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3317_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3317.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2156_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2156.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2506_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2506.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2013_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2013.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2443_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2443.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2910_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2910.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_158_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_158.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3252_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3252.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_508_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_508.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1795_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1795.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1845_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1845.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2290_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2290.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_621_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_621.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1146_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1146.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3481_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3481.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_271_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_271.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1516_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1516.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_764_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_764.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1003_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1003.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3194_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3194.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_334_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_334.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1453_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1453.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1900_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1900.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2785_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2785.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_11_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_11.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2510_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2510.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_908_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_908.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2140_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2140.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3301_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3301.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2843_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2843.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1296_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1296.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1783_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1783.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3244_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3244.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1279_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1279.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1629_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1629.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2906_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2906.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2455_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2455.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2005_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2005.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1500_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1500.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_267_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_267.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3497_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3497.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1150_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1150.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_637_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_637.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2286_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2286.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1853_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1853.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2269_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2269.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2793_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2793.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1916_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1916.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2639_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2639.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1445_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1445.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3478_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3478.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_322_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_322.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3182_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3182.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1015_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1015.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3028_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3028.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_772_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_772.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_288_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_288.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2814_test(@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2814.sendRequest(conn, jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1691_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1691.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3356_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3356.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2117_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2117.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_46_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_46.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2547_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2547.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2052_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2052.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2402_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2402.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_119_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_119.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2951_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2951.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1384_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1384.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_549_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_549.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3213_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3213.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1804_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1804.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2681_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2681.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1107_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1107.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_660_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_660.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1557_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1557.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_230_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_230.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3090_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3090.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1042_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1042.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_725_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_725.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1412_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1412.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_375_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_375.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2394_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2394.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1941_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1941.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2029_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2029.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_861_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_861.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2479_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2479.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2183_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2183.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1605_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1605.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_162_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_162.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_498_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_498.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3268_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3268.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1255_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1255.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_532_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_532.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2880_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2880.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3287_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3287.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1740_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1740.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1310_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1310.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_477_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_477.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2496_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2496.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_924_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_924.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1039_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1039.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3004_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3004.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1193_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1193.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1469_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1469.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3454_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3454.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2615_test(@From(SqlInjectonGenerator.class) String countryLength ,@From(SqlInjectonGenerator.class) String countryName ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(countryLength +", "+countryName +", "+" is/are the input to perform SQLi", Dummy_before_2615.sendRequest(conn, countryLength ,countryName ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1890_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1890.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2245_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2245.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2750_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2750.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2300_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2300.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3141_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3141.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1486_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1486.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3511_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3511.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1202_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1202.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_565_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_565.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3395_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3395.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1652_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1652.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_135_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_135.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_85_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_85.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2584_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2584.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_836_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_836.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2091_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2091.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_973_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_973.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1347_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1347.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_420_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_420.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2992_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2992.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1717_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1717.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2838_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2838.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2212_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2212.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2642_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2642.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_359_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_359.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3403_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3403.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_709_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_709.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3053_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3053.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1594_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1594.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1081_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1081.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3116_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3116.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1982_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1982.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2357_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2357.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1828_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1828.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2707_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2707.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_820_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_820.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2068_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2068.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2592_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2592.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_93_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_93.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2438_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2438.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_123_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_123.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1644_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1644.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3383_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3383.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_573_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_573.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1214_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1214.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3229_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3229.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1701_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1701.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2984_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2984.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_436_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_436.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1351_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1351.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_965_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_965.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2087_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2087.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1582_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1582.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3045_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3045.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1078_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1078.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3415_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3415.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1428_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1428.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2654_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2654.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2204_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2204.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2711_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2711.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2341_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2341.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1994_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1994.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3100_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3100.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1097_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1097.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2896_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2896.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_524_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_524.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1243_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1243.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_174_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_174.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1613_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1613.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2195_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2195.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_877_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_877.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_898_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_898.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_932_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_932.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2480_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2480.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_461_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_461.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1306_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1306.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2879_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2879.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1756_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1756.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3291_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3291.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2253_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2253.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1886_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1886.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2603_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2603.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3442_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3442.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_318_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_318.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1185_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1185.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3012_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3012.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_748_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_748.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3507_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3507.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1490_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1490.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3157_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3157.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2316_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2316.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2746_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String status ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+status +", "+" is/are the input to perform SQLi", Dummy_before_2746.sendRequest(conn, id ,status ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1869_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1869.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2731_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2731.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2361_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2361.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3120_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3120.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_380_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_380.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1058_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1058.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3065_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3065.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_695_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_695.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1408_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1408.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3435_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3435.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2674_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2674.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2224_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2224.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1721_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1721.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_416_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_416.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1371_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1371.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_945_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_945.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_800_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_800.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2048_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2048.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2418_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2418.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_103_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_103.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1664_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1664.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_553_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_553.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3209_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3209.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1234_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1234.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_787_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_787.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3527_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3527.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3177_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3177.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2336_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2336.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2766_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2766.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1849_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1849.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2273_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2273.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2789_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2789.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2623_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2623.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3462_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3462.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_338_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_338.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3198_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3198.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3032_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3032.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_768_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_768.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_292_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_292.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_912_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_912.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_441_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_441.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1326_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1326.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2859_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2859.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1776_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1776.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1799_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1799.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_504_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_504.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1263_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1263.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_154_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_154.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1633_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1633.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_857_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_857.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2770_test(@From(SqlInjectonGenerator.class) String Id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Id +", "+" is/are the input to perform SQLi", Dummy_before_2770.sendRequest(conn, Id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2320_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2320.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3161_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3161.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3531_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3531.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_791_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_791.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_284_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_284.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3024_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3024.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1019_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1019.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3474_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3474.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1449_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1449.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2635_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2635.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2265_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2265.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1760_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1760.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1330_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1330.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_457_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_457.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_904_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_904.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2009_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2009.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_841_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_841.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2459_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2459.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1625_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1625.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_142_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_142.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1275_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1275.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3248_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3248.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_512_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_512.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_396_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_396.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3136_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3136.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2377_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2377.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1808_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1808.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2727_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2727.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2232_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2232.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2662_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2662.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2398_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2398.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_379_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_379.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3423_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3423.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_683_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_683.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_729_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_729.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3073_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3073.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_953_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_953.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1367_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1367.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_400_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_400.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1737_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1737.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2818_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2818.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1222_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1222.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_545_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_545.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1388_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1388.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1672_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1672.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_115_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_115.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_816_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_816.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2249_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2249.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1936_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1936.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2619_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2619.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3458_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3458.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1465_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1465.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_302_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_302.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3008_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3008.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1035_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1035.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_752_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_752.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1520_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1520.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_247_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_247.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1170_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1170.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_617_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_617.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1873_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1873.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1259_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1259.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3264_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3264.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_494_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_494.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1609_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1609.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2926_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2926.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2475_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2475.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2025_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2025.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_31_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_31.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2530_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2530.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_882_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_882.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_928_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_928.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2160_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2160.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3321_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3321.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_181_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_181.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2863_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2863.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1598_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1598.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1062_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1062.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_705_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_705.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1432_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1432.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_355_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_355.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1961_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1961.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1824_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1824.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1127_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1127.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_640_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_640.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1577_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1577.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_210_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_210.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2072_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2072.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_89_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_89.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2588_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2588.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2422_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2422.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_990_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_990.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_139_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_139.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2971_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2971.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3399_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3399.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_569_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_569.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3233_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3233.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_586_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_586.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2834_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2834.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3376_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3376.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2137_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2137.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_66_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_66.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2567_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2567.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2208_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2208.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2658_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2658.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1977_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1977.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_343_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_343.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1424_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1424.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3419_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3419.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_713_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_713.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1074_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1074.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3049_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3049.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_206_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_206.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1561_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1561.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_656_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_656.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1131_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1131.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1998_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1998.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1832_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1832.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3225_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3225.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1218_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1218.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2967_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2967.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1648_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1648.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_986_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_986.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2434_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2434.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2064_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2064.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2571_test(@From(SqlInjectonGenerator.class) String department ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(department +", "+" is/are the input to perform SQLi", Dummy_before_2571.sendRequest(conn, department ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_70_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_70.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2121_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2121.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_969_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_969.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3360_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3360.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2988_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2988.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2822_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_2822.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_590_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_590.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_744_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_744.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1023_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1023.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1189_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1189.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_314_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_314.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1473_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1473.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1920_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1920.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1865_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1865.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_601_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_601.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1166_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1166.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_251_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_251.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1536_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1536.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2033_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2033.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2463_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2463.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2199_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2199.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2930_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2930.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_178_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_178.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_482_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_482.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3272_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3272.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_528_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_528.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2875_test(@From(SqlInjectonGenerator.class) String str1 ,@From(SqlInjectonGenerator.class) String str2 ,@From(SqlInjectonGenerator.class) String str3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(str1 +", "+str2 +", "+str3 +", "+" is/are the input to perform SQLi", Dummy_before_2875.sendRequest(conn, str1 ,str2 ,str3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_197_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_197.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3337_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3337.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2176_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2176.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_894_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_894.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2526_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2526.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_27_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_27.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2032_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2032.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2462_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2462.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2198_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2198.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_179_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_179.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2931_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2931.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_483_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_483.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_529_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_529.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3273_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3273.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2874_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2874.sendRequest(conn, id ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_196_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_196.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3336_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3336.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2177_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2177.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_895_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_895.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2527_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2527.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_26_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_26.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1022_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1022.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_745_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_745.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1188_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1188.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1472_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1472.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_315_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_315.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1921_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1921.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1864_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1864.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1167_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1167.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_600_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_600.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1537_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1537.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_250_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_250.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1219_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1219.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3224_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3224.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2966_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_2966.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1649_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1649.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_987_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_987.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2435_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2435.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2065_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2065.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2570_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2570.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_71_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_71.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_968_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_968.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2120_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2120.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3361_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3361.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2989_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_2989.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2823_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2823.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_591_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_591.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2209_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2209.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2659_test(@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(sal +", "+" is/are the input to perform SQLi", Dummy_before_2659.sendRequest(conn, sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1976_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1976.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3418_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3418.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1425_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1425.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_342_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_342.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3048_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3048.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1075_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1075.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_712_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_712.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1560_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1560.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_207_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_207.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1130_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1130.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_657_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_657.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1999_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1999.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1833_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1833.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2073_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2073.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_88_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_88.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2589_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2589.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2423_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2423.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_991_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_991.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2970_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2970.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_138_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_138.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3398_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3398.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3232_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3232.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_568_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_568.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_587_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_587.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2835_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2835.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3377_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3377.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2136_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2136.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_67_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_67.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2566_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2566.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1599_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1599.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_704_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_704.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1063_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1063.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_354_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_354.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1433_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1433.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1960_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1960.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1825_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1825.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_641_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_641.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1126_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1126.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_211_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_211.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1576_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1576.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3265_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3265.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1258_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1258.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_495_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_495.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1608_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1608.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2927_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2927.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2474_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2474.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2024_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2024.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_30_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_30.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2531_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2531.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_883_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_883.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2161_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2161.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_929_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_929.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3320_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3320.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_180_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_180.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2862_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2862.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2248_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2248.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1937_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1937.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2618_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2618.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_303_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_303.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1464_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1464.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3459_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3459.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_753_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_753.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1034_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1034.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3009_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3009.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_246_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_246.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1521_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1521.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_616_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_616.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1171_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1171.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1872_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1872.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_952_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_952.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_401_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_401.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1366_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1366.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1736_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1736.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2819_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2819.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_544_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_544.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1223_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1223.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1389_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1389.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_114_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_114.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1673_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1673.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_817_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_817.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_397_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_397.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3137_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3137.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2376_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2376.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1809_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1809.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2726_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2726.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2233_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2233.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2663_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2663.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2399_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2399.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3422_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3422.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_378_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_378.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_682_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_682.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3072_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3072.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_728_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_728.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1761_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1761.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_456_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_456.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1331_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1331.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_905_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_905.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_840_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_840.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2008_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2008.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2458_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2458.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_143_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_143.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1624_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1624.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_513_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_513.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3249_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3249.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1274_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1274.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2771_test(@From(SqlInjectonGenerator.class) String Name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Name +", "+" is/are the input to perform SQLi", Dummy_before_2771.sendRequest(conn, Name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2321_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2321.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3160_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3160.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3530_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3530.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_790_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_790.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_285_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_285.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1018_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1018.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3025_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3025.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1448_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1448.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3475_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3475.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2634_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2634.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2264_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2264.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_913_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_913.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1327_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1327.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_440_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_440.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2858_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2858.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1777_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1777.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1798_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1798.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1262_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1262.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_505_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_505.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1632_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1632.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_155_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_155.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_856_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_856.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_786_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_786.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3526_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3526.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3176_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3176.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2337_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2337.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2767_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2767.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1848_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1848.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2272_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2272.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2788_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+" is/are the input to perform SQLi", Dummy_before_2788.sendRequest(conn, id1 ,id2 ,id3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2622_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2622.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_339_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_339.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3463_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3463.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3199_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3199.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_769_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_769.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3033_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3033.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_293_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_293.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1720_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1720.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1370_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1370.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_417_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_417.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_944_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_944.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2049_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2049.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_801_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_801.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2419_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2419.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1665_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1665.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_102_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_102.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1235_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1235.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3208_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3208.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_552_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_552.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2730_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2730.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2360_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_2360.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3121_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3121.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_381_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_381.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3064_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3064.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1059_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1059.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_694_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_694.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3434_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3434.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1409_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1409.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2675_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2675.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2225_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2225.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2252_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2252.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1887_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1887.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2602_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2602.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_319_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_319.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3443_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3443.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1184_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1184.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_749_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_749.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3013_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3013.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3506_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3506.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1491_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1491.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3156_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3156.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2317_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2317.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2747_test(@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String status ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+status +", "+" is/are the input to perform SQLi", Dummy_before_2747.sendRequest(conn, id ,status ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1868_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1868.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2897_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2897.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1242_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1242.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_525_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_525.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1612_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1612.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_175_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_175.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2194_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2194.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_876_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_876.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_899_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_899.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_933_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_933.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2481_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2481.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1307_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1307.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_460_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_460.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2878_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2878.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1757_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1757.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3290_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3290.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1583_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1583.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1079_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1079.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3044_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3044.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1429_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1429.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3414_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3414.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2655_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2655.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2205_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2205.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2710_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2710.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2340_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2340.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1995_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1995.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3101_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3101.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1096_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1096.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2069_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2069.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_821_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_821.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2593_test(@From(SqlInjectonGenerator.class) String department ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(department +", "+" is/are the input to perform SQLi", Dummy_before_2593.sendRequest(conn, department ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_92_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_92.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2439_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2439.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1645_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1645.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_122_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_122.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3382_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3382.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3228_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3228.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1215_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1215.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_572_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_572.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1700_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1700.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2985_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2985.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1350_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1350.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_437_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_437.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_964_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_964.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2086_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2086.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2213_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2213.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2643_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2643.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3402_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3402.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_358_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_358.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3052_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3052.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_708_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_708.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1595_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1595.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1080_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1080.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3117_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3117.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1983_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1983.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2356_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2356.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1829_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1829.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2706_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2706.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_564_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_564.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1203_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1203.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3394_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3394.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_134_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_134.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1653_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1653.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_84_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_84.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2585_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2585.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_837_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_837.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2090_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2090.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_972_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_972.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_421_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_421.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1346_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1346.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2993_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2993.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1716_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1716.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2839_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2839.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3005_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3005.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1038_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1038.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1192_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1192.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3455_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3455.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1468_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1468.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2614_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2614.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1891_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1891.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2244_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2244.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2751_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2751.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2301_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2301.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3140_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3140.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1487_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1487.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3510_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3510.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_860_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_860.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2028_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2028.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2478_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2478.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2182_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2182.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_163_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_163.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1604_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1604.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_499_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_499.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_533_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_533.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1254_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1254.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3269_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3269.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2881_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2881.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3286_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3286.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1741_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1741.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_476_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_476.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1311_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1311.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2497_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2497.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_925_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_925.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1805_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1805.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2680_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2680.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_661_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_661.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1106_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1106.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_231_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_231.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1556_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1556.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3091_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3091.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_724_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_724.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1043_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1043.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_374_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_374.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1413_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1413.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2395_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2395.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1940_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1940.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2815_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2815.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1690_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1690.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3357_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3357.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2116_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2116.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_47_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_47.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2546_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2546.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2053_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2053.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2403_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2403.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2950_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2950.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_118_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_118.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1385_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1385.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3212_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3212.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_548_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_548.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_266_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_266.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1501_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1501.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3496_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3496.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_636_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_636.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1151_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1151.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2287_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2287.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1852_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1852.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2268_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2268.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2792_test(@From(SqlInjectonGenerator.class) String age ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(age +", "+" is/are the input to perform SQLi", Dummy_before_2792.sendRequest(conn, age ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1917_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1917.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2638_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2638.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_323_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_323.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3479_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3479.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1444_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1444.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3183_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3183.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_773_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_773.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3029_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3029.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1014_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1014.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_289_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_289.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_10_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_10.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2511_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2511.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2141_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2141.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_909_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_909.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3300_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3300.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2842_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2842.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1297_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1297.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1782_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1782.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1278_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1278.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3245_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3245.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1628_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1628.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2907_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2907.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2454_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2454.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2004_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2004.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1844_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1844.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2291_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2291.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1147_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1147.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_620_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_620.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3480_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3480.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1517_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1517.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_270_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_270.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1002_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1002.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_765_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_765.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3195_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3195.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1452_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1452.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_335_test(@From(SqlInjectonGenerator.class) String DEPT_ID ,@From(SqlInjectonGenerator.class) String DEPT_NAME ,@From(SqlInjectonGenerator.class) String LOCATION_ID ,@From(SqlInjectonGenerator.class) String MANAGER_ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DEPT_ID +", "+DEPT_NAME +", "+LOCATION_ID +", "+MANAGER_ID +", "+" is/are the input to perform SQLi", Dummy_before_335.sendRequest(conn, DEPT_ID ,DEPT_NAME ,LOCATION_ID ,MANAGER_ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1901_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1901.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2784_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2784.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1281_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1281.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2854_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2854.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3316_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3316.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2157_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2157.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2507_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2507.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2012_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2012.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2442_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2442.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_159_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_159.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2911_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2911.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_509_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_509.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3253_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3253.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1794_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1794.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3087_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3087.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1540_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1540.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_227_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_227.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1110_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1110.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_677_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_677.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2696_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2696.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1813_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1813.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2229_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2229.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2679_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2679.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1956_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1956.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2383_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2383.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1405_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1405.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3438_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3438.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_362_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_362.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_698_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_698.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1055_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1055.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3068_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3068.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_732_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_732.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2550_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2550.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_51_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_51.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_948_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_948.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2100_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2100.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3341_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3341.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1686_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1686.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2803_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2803.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3204_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3204.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1239_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1239.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1393_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1393.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2946_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2946.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1669_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1669.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2415_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2415.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2045_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2045.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2314_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2314.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2744_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2744.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1538_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1538.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3505_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3505.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1492_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1492.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1168_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1168.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3155_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3155.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3440_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3440.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1187_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1187.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3010_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3010.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2251_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2251.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1884_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1884.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2601_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2601.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3339_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3339.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1304_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1304.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_463_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_463.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_199_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_199.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1754_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1754.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3293_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3293.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_29_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_29.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2528_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2528.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2178_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2178.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_930_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_930.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2482_test(@From(SqlInjectonGenerator.class) String offerLocation ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(offerLocation +", "+" is/are the input to perform SQLi", Dummy_before_2482.sendRequest(conn, offerLocation ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2197_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2197.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_875_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_875.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2894_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2894.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1241_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1241.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_526_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_526.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1611_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1611.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_176_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_176.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_658_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_658.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3102_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3102.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_208_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_208.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1095_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1095.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2713_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2713.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2343_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2343.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1996_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1996.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1979_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1979.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2656_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2656.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2206_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2206.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1580_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1580.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3047_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3047.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3417_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3417.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_967_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_967.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2085_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2085.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1703_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1703.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2986_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2986.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1353_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1353.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_434_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_434.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1646_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1646.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2969_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2969.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_121_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_121.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3381_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3381.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1216_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1216.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_571_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_571.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_822_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_822.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_91_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_91.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2590_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2590.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_988_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_988.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1980_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1980.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2355_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2355.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2705_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2705.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1083_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1083.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1579_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1579.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3114_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3114.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1129_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1129.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3401_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3401.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3051_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3051.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1596_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1596.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2210_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2210.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2640_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2640.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_422_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_422.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1345_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1345.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3378_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3378.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2990_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2990.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1715_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1715.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_588_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_588.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2569_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2569.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_68_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_68.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2093_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2093.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_971_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_971.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2139_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2139.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2586_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2586.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_87_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_87.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_834_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_834.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_567_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_567.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1200_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1200.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3397_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3397.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_137_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_137.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1650_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1650.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3143_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3143.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_619_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_619.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1484_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1484.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3513_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3513.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_249_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_249.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2752_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2752.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2302_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2302.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2617_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2617.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1938_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1938.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1892_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1892.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2247_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2247.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3006_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3006.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1191_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1191.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3456_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3456.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2494_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2494.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_926_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_926.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3285_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3285.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1742_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1742.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_475_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_475.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1312_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1312.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_160_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_160.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2928_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2928.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1607_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1607.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_530_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_530.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1257_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1257.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2882_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2882.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_863_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_863.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2181_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2181.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2396_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2396.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1943_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1943.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_727_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_727.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1040_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1040.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_377_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_377.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1410_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1410.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_662_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_662.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3138_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3138.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1105_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1105.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_398_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_398.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_232_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_232.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1555_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1555.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3092_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3092.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2729_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2729.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1806_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1806.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2379_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2379.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2683_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2683.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2953_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2953.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1386_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1386.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3211_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3211.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2050_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2050.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_818_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_818.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2400_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2400.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2115_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2115.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2545_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2545.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_44_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_44.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2816_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2816.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1739_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1739.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1693_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1693.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1369_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1369.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3354_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3354.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_320_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_320.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1447_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1447.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3180_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3180.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_770_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_770.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1017_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1017.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2791_test(@From(SqlInjectonGenerator.class) String age ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(age +", "+" is/are the input to perform SQLi", Dummy_before_2791.sendRequest(conn, age ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1914_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1914.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2284_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2284.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1851_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1851.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_265_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_265.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1502_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1502.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3495_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3495.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_635_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_635.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1152_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1152.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2457_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2457.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2007_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2007.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1781_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1781.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3246_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3246.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2904_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2904.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3303_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3303.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_459_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_459.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2841_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2841.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1294_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1294.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2512_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2512.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_13_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_13.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2142_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2142.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1902_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1902.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2787_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+" is/are the input to perform SQLi", Dummy_before_2787.sendRequest(conn, id1 ,id2 ,id3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1001_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1001.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_766_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_766.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3196_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3196.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1451_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1451.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_336_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_336.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1144_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1144.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3179_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3179.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_623_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_623.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3483_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3483.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1514_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1514.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3529_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3529.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_273_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_273.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_789_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_789.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1847_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1847.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2768_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2768.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2292_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2292.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2338_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2338.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2912_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2912.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3250_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3250.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1797_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1797.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_859_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_859.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2011_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2011.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2441_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2441.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2154_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2154.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2504_test(@From(SqlInjectonGenerator.class) String offerLocation ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(offerLocation +", "+" is/are the input to perform SQLi", Dummy_before_2504.sendRequest(conn, offerLocation ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1282_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1282.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1778_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1778.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2857_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2857.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3315_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3315.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1328_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1328.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1406_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1406.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_361_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_361.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1056_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1056.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_731_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_731.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1955_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1955.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2380_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2380.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2695_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2695.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1810_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1810.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3084_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3084.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1543_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1543.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_224_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_224.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1113_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1113.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_674_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_674.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2416_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2416.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2046_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2046.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3207_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3207.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1390_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1390.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2945_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2945.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_418_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_418.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3342_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3342.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1685_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1685.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2800_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2800.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_52_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_52.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2553_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2553.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2103_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2103.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2174_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2174.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_896_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_896.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_25_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_25.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2524_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2524.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1758_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1758.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2877_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2877.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_195_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_195.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1308_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1308.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3335_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3335.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2932_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2932.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_480_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_480.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3270_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3270.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2898_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2898.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_879_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_879.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2031_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2031.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2461_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2461.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3159_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3159.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1164_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1164.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_603_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_603.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3509_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3509.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1534_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1534.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_253_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_253.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1867_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1867.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2748_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2748.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2318_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2318.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1922_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1922.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1888_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1888.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1021_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1021.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_746_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_746.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1471_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1471.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_316_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_316.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_438_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_438.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3362_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3362.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2820_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2820.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_592_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_592.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_72_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_72.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2573_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2573.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2089_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2089.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2123_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2123.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_984_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_984.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2436_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2436.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2066_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2066.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3227_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3227.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2965_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2965.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1830_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1830.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1099_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1099.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1563_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1563.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_204_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_204.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1133_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1133.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_654_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_654.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1426_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1426.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_341_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_341.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1076_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1076.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_711_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_711.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1975_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1975.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2135_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2135.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2565_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2565.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_64_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_64.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_584_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_584.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2836_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2836.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1719_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1719.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3374_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3374.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1349_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1349.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2973_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2973.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3231_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3231.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2070_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2070.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_838_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_838.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2420_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2420.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_992_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_992.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_642_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_642.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1125_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1125.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3118_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3118.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_212_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_212.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1575_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1575.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2709_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2709.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1826_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1826.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2359_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2359.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1963_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1963.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_707_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_707.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1060_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1060.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_357_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_357.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1430_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1430.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3323_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3323.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_479_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_479.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_183_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_183.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2861_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2861.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3289_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3289.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2532_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2532.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_33_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_33.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_880_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_880.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2162_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2162.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2498_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2498.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2477_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2477.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2027_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2027.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3266_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3266.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_496_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_496.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2924_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2924.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1871_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1871.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_245_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_245.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1522_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1522.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1488_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1488.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_615_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_615.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1172_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1172.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_300_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_300.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1467_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1467.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_750_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_750.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1037_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1037.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1934_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1934.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_814_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_814.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_547_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_547.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1220_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1220.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_117_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_117.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1670_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1670.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_402_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_402.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3358_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3358.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1365_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1365.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1735_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1735.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2549_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2549.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_48_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_48.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_951_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_951.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2119_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2119.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3421_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3421.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_681_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_681.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3071_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3071.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2230_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2230.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2660_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2660.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2375_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2375.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2725_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2725.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1559_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1559.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_394_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_394.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1109_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1109.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3134_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3134.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_140_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_140.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2908_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2908.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1627_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1627.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_510_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_510.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1277_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1277.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_843_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_843.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_906_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_906.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1298_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1298.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1762_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1762.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_455_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_455.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1332_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1332.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2637_test(@From(SqlInjectonGenerator.class) String countryLength ,@From(SqlInjectonGenerator.class) String countryName ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(countryLength +", "+countryName +", "+" is/are the input to perform SQLi", Dummy_before_2637.sendRequest(conn, countryLength ,countryName ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1918_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1918.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2267_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2267.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_286_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_286.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3026_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3026.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3476_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3476.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3163_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3163.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_639_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_639.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3499_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3499.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_269_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_269.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_793_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_793.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2772_test(@From(SqlInjectonGenerator.class) String Name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Name +", "+" is/are the input to perform SQLi", Dummy_before_2772.sendRequest(conn, Name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2288_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2288.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2322_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2322.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_855_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_855.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1261_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1261.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_506_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_506.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1631_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1631.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_156_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_156.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1324_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1324.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3319_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3319.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_443_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_443.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1774_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1774.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2508_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2508.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2158_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2158.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_910_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_910.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3460_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3460.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3030_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3030.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_290_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_290.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2271_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2271.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2621_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2621.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2334_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2334.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2764_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2764.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_785_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_785.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3525_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3525.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1518_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1518.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3175_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3175.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1148_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1148.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1666_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1666.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2949_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2949.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_101_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_101.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1236_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1236.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_551_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_551.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_802_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_802.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_947_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_947.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1723_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1723.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1689_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1689.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1373_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1373.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_414_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_414.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1959_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1959.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2676_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2676.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2226_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2226.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3067_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3067.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_697_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_697.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3437_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3437.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_678_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_678.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3122_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3122.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_382_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_382.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_228_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_228.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3088_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_3088.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2733_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2733.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2363_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2363.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2699_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2699.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1958_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1958.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2677_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2677.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2227_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2227.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3066_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3066.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_696_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_696.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3436_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3436.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3123_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3123.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_679_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_679.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_383_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_383.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_229_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_229.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3089_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3089.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2732_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2732.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2362_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2362.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2698_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2698.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_100_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_100.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1667_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1667.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2948_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2948.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_550_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_550.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1237_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1237.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_803_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_803.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_946_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_946.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1722_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1722.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1688_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1688.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_415_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_415.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1372_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1372.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3461_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3461.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3031_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3031.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_291_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_291.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2270_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2270.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2620_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2620.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2335_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2335.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2765_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2765.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_784_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_784.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1519_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1519.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3524_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3524.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1149_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1149.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3174_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3174.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_854_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_854.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_507_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_507.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1260_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1260.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_157_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_157.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1630_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1630.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_442_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_442.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3318_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3318.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1325_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1325.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1775_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1775.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2509_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2509.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_911_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_911.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2159_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2159.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2636_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2636.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1919_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1919.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2266_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2266.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_287_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_287.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3027_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3027.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3477_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3477.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_638_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_638.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3162_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3162.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3498_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3498.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_268_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_268.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_792_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_792.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2773_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2773.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2289_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2289.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2323_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2323.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2909_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2909.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1626_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1626.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_141_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_141.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1276_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1276.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_511_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_511.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_842_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_842.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_907_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_907.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1299_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1299.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1763_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1763.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1333_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1333.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_454_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_454.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3420_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3420.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_680_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_680.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3070_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3070.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2231_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2231.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2661_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2661.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2374_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2374.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2724_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2724.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1558_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1558.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_395_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_395.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3135_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3135.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1108_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1108.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_815_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_815.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1221_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1221.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_546_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_546.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1671_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1671.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_116_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_116.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1364_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1364.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3359_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3359.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_403_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_403.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1734_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1734.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2548_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2548.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_49_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_49.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2118_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2118.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_950_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_950.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1870_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1870.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1523_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1523.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_244_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_244.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1489_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1489.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1173_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1173.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_614_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_614.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1466_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1466.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_301_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_301.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1036_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1036.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_751_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_751.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1935_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1935.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_478_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_478.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3322_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3322.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_182_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_182.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2860_test(@From(SqlInjectonGenerator.class) String DATE1 ,@From(SqlInjectonGenerator.class) String DATE2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DATE1 +", "+DATE2 +", "+" is/are the input to perform SQLi", Dummy_before_2860.sendRequest(conn, DATE1 ,DATE2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3288_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3288.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2533_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2533.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_32_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_32.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_881_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_881.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2163_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2163.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2499_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2499.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2476_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2476.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2026_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2026.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3267_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3267.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_497_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_497.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2925_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2925.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3119_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3119.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1124_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1124.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_643_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_643.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1574_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1574.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_213_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_213.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2708_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2708.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1827_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1827.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2358_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2358.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1962_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1962.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1061_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1061.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_706_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_706.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1431_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1431.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_356_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_356.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2134_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2134.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2564_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2564.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_65_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_65.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_585_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_585.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2837_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2837.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1718_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1718.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1348_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1348.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3375_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3375.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2972_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2972.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3230_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3230.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_839_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_839.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2071_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2071.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2421_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2421.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_993_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_993.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1831_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1831.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1098_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1098.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_205_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_205.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1562_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1562.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_655_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_655.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1132_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1132.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_340_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_340.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1427_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1427.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_710_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_710.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1077_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1077.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1974_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1974.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3363_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3363.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_439_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_439.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2821_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2821.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_593_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_593.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_73_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_73.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2572_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2572.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2088_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2088.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2122_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2122.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_985_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_985.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2437_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2437.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2067_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2067.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3226_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3226.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2964_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2964.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_602_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_602.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1165_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1165.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3158_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3158.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_252_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_252.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1535_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1535.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3508_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3508.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1866_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1866.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2749_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2749.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2319_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2319.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1923_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1923.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1889_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1889.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_747_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_747.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1020_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1020.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_317_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_317.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1470_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1470.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2175_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2175.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_897_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_897.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_24_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_24.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2525_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2525.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1759_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1759.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2876_test(@From(SqlInjectonGenerator.class) String str1 ,@From(SqlInjectonGenerator.class) String str2 ,@From(SqlInjectonGenerator.class) String str3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(str1 +", "+str2 +", "+str3 +", "+" is/are the input to perform SQLi", Dummy_before_2876.sendRequest(conn, str1 ,str2 ,str3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_194_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_194.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3334_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3334.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1309_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1309.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2933_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2933.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_481_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_481.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3271_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3271.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2899_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2899.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2030_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2030.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_878_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_878.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2460_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2460.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2417_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2417.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2047_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2047.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3206_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3206.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1391_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1391.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2944_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2944.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3343_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3343.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_419_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_419.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1684_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1684.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2801_test(@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+" is/are the input to perform SQLi", Dummy_before_2801.sendRequest(conn, counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_53_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_53.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2552_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2552.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2102_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2102.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_360_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_360.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1407_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1407.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_730_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_730.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1057_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1057.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1954_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1954.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2381_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2381.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2694_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2694.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1811_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1811.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3085_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3085.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_225_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_225.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1542_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1542.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_675_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_675.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1112_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1112.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2913_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2913.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3251_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3251.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1796_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1796.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2010_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2010.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_858_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_858.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2440_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2440.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2155_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2155.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2505_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2505.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1283_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1283.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1779_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1779.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2856_test(@From(SqlInjectonGenerator.class) String number ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+" is/are the input to perform SQLi", Dummy_before_2856.sendRequest(conn, number ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1329_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1329.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3314_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3314.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1903_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1903.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2786_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+" is/are the input to perform SQLi", Dummy_before_2786.sendRequest(conn, id1 ,id2 ,id3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_767_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_767.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1000_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1000.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3197_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3197.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_337_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_337.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1450_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1450.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_622_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_622.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3178_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3178.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1145_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1145.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3482_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3482.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_272_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_272.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3528_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3528.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1515_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1515.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_788_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_788.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1846_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1846.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2769_test(@From(SqlInjectonGenerator.class) String Id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Id +", "+" is/are the input to perform SQLi", Dummy_before_2769.sendRequest(conn, Id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2293_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2293.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2339_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2339.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2456_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2456.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2006_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2006.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1780_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1780.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3247_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3247.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2905_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2905.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_458_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_458.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3302_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3302.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2840_test(@From(SqlInjectonGenerator.class) String days ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+" is/are the input to perform SQLi", Dummy_before_2840.sendRequest(conn, days ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1295_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1295.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2513_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2513.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_12_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_12.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2143_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2143.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1446_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1446.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_321_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_321.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3181_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3181.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1016_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_1016.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_771_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_771.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2790_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+" is/are the input to perform SQLi", Dummy_before_2790.sendRequest(conn, id1 ,id2 ,id3 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1915_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1915.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2285_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2285.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1850_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1850.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1503_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1503.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_264_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_264.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3494_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3494.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1153_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1153.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_634_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_634.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2952_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2952.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1387_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1387.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3210_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3210.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_819_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_819.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2051_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2051.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2401_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2401.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2114_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2114.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2544_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2544.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_45_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_45.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2817_test(@From(SqlInjectonGenerator.class) String commission ,@From(SqlInjectonGenerator.class) String id ,@From(SqlInjectonGenerator.class) String jobtitle ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(commission +", "+id +", "+jobtitle +", "+" is/are the input to perform SQLi", Dummy_before_2817.sendRequest(conn, commission ,id ,jobtitle ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1738_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1738.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1692_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1692.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3355_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3355.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1368_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1368.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2397_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2397.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1942_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1942.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1041_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1041.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_726_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_726.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1411_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1411.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_376_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_376.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1104_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1104.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3139_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3139.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_663_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_663.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_399_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_399.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1554_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1554.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_233_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_233.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3093_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3093.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2728_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2728.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1807_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1807.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2378_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2378.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2682_test(@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(sal +", "+" is/are the input to perform SQLi", Dummy_before_2682.sendRequest(conn, sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2495_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2495.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_927_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_927.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3284_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3284.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1743_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1743.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1313_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1313.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_474_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_474.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2929_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2929.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1606_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1606.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_161_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_161.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1256_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1256.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_531_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_531.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2883_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2883.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_862_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_862.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2180_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2180.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_618_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_618.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3142_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3142.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1485_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1485.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_248_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_248.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3512_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3512.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2753_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2753.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2303_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2303.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2616_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2616.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1939_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1939.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1893_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1893.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2246_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2246.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3007_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3007.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1190_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1190.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3457_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3457.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3379_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3379.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1344_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1344.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_423_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_423.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2991_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2991.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1714_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1714.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_589_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_589.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2568_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2568.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_69_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_69.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2092_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2092.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2138_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2138.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_970_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_970.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2587_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2587.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_86_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_86.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_835_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_835.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1201_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1201.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_566_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_566.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3396_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3396.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1651_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1651.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_136_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_136.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1981_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1981.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2354_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2354.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2704_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2704.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1082_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1082.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1578_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1578.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1128_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1128.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3115_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3115.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3400_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3400.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3050_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3050.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1597_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1597.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2211_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2211.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2641_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2641.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_966_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_966.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2084_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2084.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1702_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1702.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2987_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2987.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_435_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_435.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1352_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1352.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_120_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_120.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1647_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1647.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2968_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2968.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3380_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3380.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_570_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_570.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1217_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1217.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_823_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_823.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_90_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_90.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2591_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2591.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_989_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_989.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3103_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3103.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_659_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_659.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_209_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_209.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1094_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1094.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2712_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2712.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2342_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2342.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1997_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1997.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1978_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1978.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2657_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2657.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2207_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2207.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1581_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1581.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3046_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3046.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3416_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3416.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_462_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_462.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1305_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1305.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3338_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3338.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_198_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_198.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1755_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1755.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3292_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3292.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_28_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_28.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2529_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2529.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_931_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_931.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2179_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2179.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2483_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2483.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2196_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2196.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_874_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_874.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2895_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2895.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_527_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_527.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1240_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1240.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_177_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_177.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1610_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1610.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2315_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2315.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2745_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2745.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3504_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3504.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1539_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1539.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1493_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1493.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3154_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3154.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1169_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1169.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3441_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3441.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1186_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1186.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3011_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3011.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2250_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2250.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1885_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1885.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2600_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2600.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2871_test(@From(SqlInjectonGenerator.class) String str ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(str +", "+" is/are the input to perform SQLi", Dummy_before_2871.sendRequest(conn, str ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3299_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3299.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_469_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_469.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3333_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3333.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_193_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_193.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2172_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2172.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2488_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2488.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_23_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_23.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2522_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2522.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_890_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_890.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2037_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2037.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2467_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2467.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_486_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_486.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2934_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2934.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3276_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3276.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1861_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1861.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1498_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1498.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1162_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1162.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_605_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_605.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1532_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1532.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_255_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_255.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1027_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1027.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_740_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_740.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1477_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1477.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_310_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_310.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1924_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1924.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_74_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_74.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2575_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2575.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2125_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2125.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3364_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3364.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1359_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1359.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_594_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_594.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1709_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1709.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2826_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2826.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3221_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3221.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2963_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2963.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2430_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2430.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_982_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_982.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_828_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_828.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2060_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2060.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1565_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1565.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_202_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_202.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1135_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1135.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3108_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3108.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_652_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_652.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2349_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_2349.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1836_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1836.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2719_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2719.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1973_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1973.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1420_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1420.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_347_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_347.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1070_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1070.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_717_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_717.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2830_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2830.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_582_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_582.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3372_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3372.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_428_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_428.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2133_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2133.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2563_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2563.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_62_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_62.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2099_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2099.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2076_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2076.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_994_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_994.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2426_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2426.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2975_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2975.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3237_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3237.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1820_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1820.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_644_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_644.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1123_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1123.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1089_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1089.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_214_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_214.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1573_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1573.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_701_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_701.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1066_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1066.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_351_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_351.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1436_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1436.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1965_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1965.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_886_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_886.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2534_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2534.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_35_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_35.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2164_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2164.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_185_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_185.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1318_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1318.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3325_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3325.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2867_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2867.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1748_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1748.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3260_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3260.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2888_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2888.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2922_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2922.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_490_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_490.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2471_test(@From(SqlInjectonGenerator.class) String CurrentDate ,@From(SqlInjectonGenerator.class) String Fare ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(CurrentDate +", "+Fare +", "+" is/are the input to perform SQLi", Dummy_before_2471.sendRequest(conn, CurrentDate ,Fare ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2021_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2021.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_869_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_869.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_243_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_243.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3519_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3519.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1524_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1524.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_613_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_613.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3149_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3149.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1174_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1174.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2308_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2308.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2758_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2758.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1877_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1877.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1898_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1898.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1932_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1932.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_306_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_306.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1461_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1461.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_756_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_756.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1031_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1031.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_541_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_541.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1226_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1226.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_111_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_111.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2959_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2959.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1676_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1676.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_812_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_812.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_957_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_957.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1699_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1699.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_404_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_404.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1363_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1363.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1733_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1733.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2236_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2236.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2666_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2666.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1949_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1949.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_687_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_687.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3427_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3427.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3077_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3077.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_238_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_238.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3098_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3098.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3132_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3132.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_668_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_668.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_392_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_392.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2373_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2373.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2689_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2689.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2723_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2723.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_845_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_845.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_146_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_146.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1621_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1621.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_516_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_516.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1271_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1271.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1764_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1764.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_453_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_453.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1334_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1334.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3309_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3309.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_900_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_900.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2148_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2148.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2518_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2518.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_19_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_19.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3020_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3020.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_280_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_280.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3470_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3470.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2631_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2631.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2261_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2261.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2774_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2774.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2324_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2324.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3165_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3165.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1158_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1158.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_795_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_795.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1508_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1508.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1267_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1267.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_500_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_500.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1637_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1637.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2918_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2918.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_150_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_150.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_853_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_853.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_916_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_916.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1322_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1322.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_445_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_445.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1288_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1288.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1772_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1772.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2277_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2277.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1908_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1908.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2627_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2627.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3466_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3466.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_296_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_296.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3036_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3036.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_279_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_279.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3523_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3523.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_783_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_783.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_629_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_629.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3173_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3173.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3489_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3489.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2332_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2332.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2762_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2762.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2298_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2298.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_804_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_804.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1660_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1660.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_107_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_107.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1230_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1230.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_557_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_557.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1725_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1725.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3348_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3348.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1375_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1375.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_412_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_412.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2109_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2109.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_941_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_941.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_58_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_58.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2559_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2559.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3061_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3061.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3431_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3431.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_691_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_691.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2670_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2670.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2220_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2220.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2735_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2735.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2365_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2365.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_384_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_384.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1119_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1119.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3124_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3124.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1549_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1549.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_259_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_259.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3503_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3503.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_609_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_609.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3153_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3153.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1494_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1494.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2312_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2312.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2742_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2742.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1882_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1882.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2257_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2257.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1928_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1928.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2607_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2607.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1181_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1181.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3446_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3446.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3016_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3016.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2484_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2484.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_936_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_936.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1302_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1302.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_465_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_465.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3295_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3295.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1752_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1752.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1247_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1247.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_520_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_520.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2892_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2892.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1617_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1617.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2938_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2938.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_170_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_170.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2191_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2191.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_873_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_873.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2715_test(@From(SqlInjectonGenerator.class) String days ,@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(days +", "+sal +", "+" is/are the input to perform SQLi", Dummy_before_2715.sendRequest(conn, days ,sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1990_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1990.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2345_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2345.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3104_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3104.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1139_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1139.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1093_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1093.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1569_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1569.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3041_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3041.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1586_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1586.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3411_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3411.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2650_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2650.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2200_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2200.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1705_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1705.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_598_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_598.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1355_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1355.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3368_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3368.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_432_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_432.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2980_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2980.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2129_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2129.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_961_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_961.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_78_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_78.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2579_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2579.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2083_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2083.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_97_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_97.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2596_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2596.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_824_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_824.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3387_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3387.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1640_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1640.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_127_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_127.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1210_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1210.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_577_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_577.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_218_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_218.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1085_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1085.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3112_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3112.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_648_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_648.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2353_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2353.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1986_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1986.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2703_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2703.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2216_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2216.sendRequest(conn, rand8 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2646_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2646.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1969_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1969.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3407_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3407.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1590_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1590.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3057_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3057.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2095_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2095.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_977_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_977.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2996_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2996.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_424_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_424.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1343_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1343.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1713_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1713.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_561_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_561.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1206_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1206.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_131_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_131.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2979_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2979.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1656_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1656.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3391_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3391.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_998_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_998.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_832_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_832.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2580_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2580.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_81_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_81.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2754_test(@From(SqlInjectonGenerator.class) String counter ,@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(counter +", "+id +", "+" is/are the input to perform SQLi", Dummy_before_2754.sendRequest(conn, counter ,id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2304_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2304.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1482_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1482.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1178_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1178.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3145_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3145.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1528_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1528.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3515_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3515.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3000_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3000.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3450_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3450.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1197_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1197.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2611_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2611.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2241_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2241.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1894_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1894.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1744_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1744.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3283_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3283.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_473_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_473.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3329_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3329.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1314_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1314.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_189_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_189.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_920_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_920.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2168_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2168.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2492_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2492.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2538_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2538.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_39_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_39.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_865_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_865.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2187_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2187.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_166_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_166.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1601_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1601.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2884_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2884.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_536_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_536.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1251_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1251.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_721_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_721.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1046_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1046.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_371_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_371.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1416_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1416.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1945_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1945.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2390_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2390.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1800_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1800.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2685_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2685.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_664_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_664.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1103_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1103.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3094_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3094.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_234_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_234.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1553_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1553.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2056_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2056.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2406_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2406.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1380_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1380.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2955_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2955.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3217_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3217.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2810_test(@From(SqlInjectonGenerator.class) String percentage ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(percentage +", "+" is/are the input to perform SQLi", Dummy_before_2810.sendRequest(conn, percentage ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3352_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3352.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_408_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_408.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1695_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1695.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2113_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2113.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2543_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2543.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_42_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_42.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2797_test(@From(SqlInjectonGenerator.class) String GPA ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+" is/are the input to perform SQLi", Dummy_before_2797.sendRequest(conn, GPA ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1912_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1912.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3186_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3186.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_326_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_326.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1441_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1441.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_776_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_776.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1011_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1011.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_263_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_263.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1504_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1504.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_799_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_799.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_633_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_633.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1154_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1154.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3169_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3169.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_6_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_6.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3493_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3493.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2328_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2328.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2778_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2778.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1857_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1857.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2282_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2282.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3240_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3240.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1787_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1787.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2902_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2902.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2451_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2451.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2001_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2001.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_849_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_849.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2514_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2514.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_15_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_15.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2144_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2144.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3305_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3305.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1338_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1338.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1292_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1292.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2847_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2847.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1768_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1768.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1007_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1007.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_760_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_760.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1457_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1457.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_330_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_330.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3190_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3190.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1904_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1904.sendRequest(conn, rand4 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2781_test(@From(SqlInjectonGenerator.class) String eid ,@From(SqlInjectonGenerator.class) String jid ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(eid +", "+jid +", "+" is/are the input to perform SQLi", Dummy_before_2781.sendRequest(conn, eid ,jid ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2294_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2294.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1841_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1841.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3485_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3485.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1142_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1142.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_625_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_625.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1512_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1512.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_275_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_275.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2017_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2017.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2447_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2447.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2914_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2914.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1791_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1791.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3256_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3256.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2851_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2851.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1284_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1284.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_449_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_449.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3313_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3313.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2152_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2152.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2502_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2502.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2386_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2386.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1953_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1953.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1400_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1400.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_367_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_367.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1050_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1050.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_737_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_737.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1545_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1545.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_222_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_222.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3082_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3082.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3128_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3128.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1115_test(@From(SqlInjectonGenerator.class) String DEPTID ,@From(SqlInjectonGenerator.class) String DEPTNAME ,@From(SqlInjectonGenerator.class) String LOCATIONID ,@From(SqlInjectonGenerator.class) String MANAGERID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(DEPTID +", "+DEPTNAME +", "+LOCATIONID +", "+MANAGERID +", "+" is/are the input to perform SQLi", Dummy_before_1115.sendRequest(conn, DEPTID ,DEPTNAME ,LOCATIONID ,MANAGERID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_672_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_672.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_388_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_388.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2369_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2369.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2693_test(@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(sal +", "+" is/are the input to perform SQLi", Dummy_before_2693.sendRequest(conn, sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1816_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1816.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2739_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2739.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3201_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3201.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2943_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2943.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1396_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1396.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2410_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2410.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_808_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_808.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2040_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2040.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_54_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_54.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2555_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2555.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2105_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2105.sendRequest(conn, rand6 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1683_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1683.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1379_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1379.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3344_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3344.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1729_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1729.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2806_test(@From(SqlInjectonGenerator.class) String number ,@From(SqlInjectonGenerator.class) String post ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+post +", "+" is/are the input to perform SQLi", Dummy_before_2806.sendRequest(conn, number ,post ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3200_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3200.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2942_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2942.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1397_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1397.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2411_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2411.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2041_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2041.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_809_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_809.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_55_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_55.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2554_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2554.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2104_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2104.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1682_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1682.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3345_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3345.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1378_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1378.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1728_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1728.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2807_test(@From(SqlInjectonGenerator.class) String number ,@From(SqlInjectonGenerator.class) String post ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(number +", "+post +", "+" is/are the input to perform SQLi", Dummy_before_2807.sendRequest(conn, number ,post ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2387_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2387.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1952_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1952.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_366_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_366.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1401_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1401.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_736_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_736.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1051_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1051.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_223_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_223.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1544_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1544.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3083_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3083.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_673_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_673.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1114_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1114.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3129_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3129.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_389_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_389.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2368_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2368.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2692_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2692.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1817_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1817.sendRequest(conn, rand3 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2738_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2738.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2016_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2016.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2446_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2446.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2915_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2915.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1790_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1790.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3257_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3257.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2850_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2850.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1285_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1285.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3312_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3312.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_448_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_448.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2153_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2153.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2503_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2503.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_761_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_761.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1006_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1006.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_331_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_331.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1456_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1456.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3191_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3191.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1905_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1905.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2780_test(@From(SqlInjectonGenerator.class) String eid ,@From(SqlInjectonGenerator.class) String jid ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(eid +", "+jid +", "+" is/are the input to perform SQLi", Dummy_before_2780.sendRequest(conn, eid ,jid ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2295_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2295.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1840_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1840.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3484_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3484.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_624_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_624.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1143_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1143.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_274_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_274.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1513_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1513.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3241_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3241.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1786_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1786.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2903_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2903.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2450_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2450.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_848_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_848.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2000_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2000.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2515_test(@From(SqlInjectonGenerator.class) String offerLocation ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(offerLocation +", "+" is/are the input to perform SQLi", Dummy_before_2515.sendRequest(conn, offerLocation ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_14_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_14.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2145_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2145.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1339_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1339.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3304_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3304.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1293_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1293.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2846_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2846.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1769_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1769.sendRequest(conn, rand3 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2796_test(@From(SqlInjectonGenerator.class) String GPA ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+" is/are the input to perform SQLi", Dummy_before_2796.sendRequest(conn, GPA ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1913_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1913.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3187_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3187.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1440_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1440.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_327_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_327.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1010_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1010.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_777_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_777.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1505_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1505.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_262_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_262.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_798_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_798.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3168_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3168.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1155_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1155.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_632_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_632.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_7_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_7.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3492_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3492.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2329_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2329.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2779_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2779.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1856_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1856.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2283_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2283.sendRequest(conn, rand8 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2057_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2057.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2407_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2407.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1381_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1381.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2954_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2954.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3216_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3216.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2811_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_2811.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_409_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_409.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3353_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3353.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1694_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1694.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2112_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2112.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2542_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2542.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_43_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_43.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1047_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1047.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_720_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_720.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1417_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1417.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_370_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_370.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1944_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1944.sendRequest(conn, rand5 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2391_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2391.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1801_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1801.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2684_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2684.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1102_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1102.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_665_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_665.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3095_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3095.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1552_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1552.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_235_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_235.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1745_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1745.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3282_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3282.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1315_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1315.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3328_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3328.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_472_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_472.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_188_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_188.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2169_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2169.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_921_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_921.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2493_test(@From(SqlInjectonGenerator.class) String offerLocation ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(offerLocation +", "+" is/are the input to perform SQLi", Dummy_before_2493.sendRequest(conn, offerLocation ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2539_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2539.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_38_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_38.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_864_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_864.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2186_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2186.sendRequest(conn, rand7 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1600_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1600.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_167_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_167.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2885_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2885.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1250_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1250.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_537_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_537.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2755_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2755.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2305_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2305.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1483_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1483.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3144_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3144.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1179_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1179.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3514_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3514.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1529_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1529.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3001_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3001.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3451_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3451.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1196_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1196.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2610_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2610.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2240_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2240.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1895_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1895.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2094_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2094.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_976_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_976.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2997_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2997.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1342_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1342.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_425_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_425.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1712_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1712.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1207_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1207.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_560_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_560.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2978_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_2978.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1657_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1657.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_130_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_130.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3390_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3390.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_999_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_999.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_833_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_833.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2581_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2581.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_80_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_80.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_219_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_219.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1084_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1084.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_649_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_649.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3113_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3113.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2352_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2352.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1987_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1987.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2702_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2702.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2217_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2217.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2647_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2647.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1968_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1968.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3406_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3406.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1591_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1591.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3056_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3056.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1704_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_1704.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_599_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_599.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_433_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_433.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3369_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3369.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1354_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1354.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2981_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2981.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_960_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_960.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2128_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2128.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_79_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_79.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2578_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2578.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2082_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2082.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_96_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_96.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2597_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2597.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_825_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_825.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3386_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3386.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_126_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_126.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1641_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1641.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_576_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_576.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1211_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1211.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2714_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2714.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1991_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1991.sendRequest(conn, rand5 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2344_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2344.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1138_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1138.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3105_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3105.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1092_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1092.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1568_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1568.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3040_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3040.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1587_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1587.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3410_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3410.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2651_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2651.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2201_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2201.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2485_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2485.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_937_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_937.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_464_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_464.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1303_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1303.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3294_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3294.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1753_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1753.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_521_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_521.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1246_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1246.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2893_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2893.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_171_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_171.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1616_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1616.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2939_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2939.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2190_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2190.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_872_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_872.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3502_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3502.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_258_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_258.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3152_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3152.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_608_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_608.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1495_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1495.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2313_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2313.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2743_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2743.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1883_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1883.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2256_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2256.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1929_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1929.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2606_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2606.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1180_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1180.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3447_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3447.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3017_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3017.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3060_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3060.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3430_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3430.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_690_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_690.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2671_test(@From(SqlInjectonGenerator.class) String sal ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(sal +", "+" is/are the input to perform SQLi", Dummy_before_2671.sendRequest(conn, sal ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2221_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2221.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2734_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2734.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2364_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2364.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_385_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_385.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3125_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3125.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1118_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1118.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1548_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1548.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_805_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_805.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_106_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_106.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1661_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1661.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_556_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_556.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1231_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1231.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1724_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1724.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_413_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_413.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1374_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1374.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3349_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3349.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_940_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_940.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2108_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2108.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_59_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_59.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2558_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2558.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2276_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2276.sendRequest(conn, rand8 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1909_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1909.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2626_test(@From(SqlInjectonGenerator.class) String countryLength ,@From(SqlInjectonGenerator.class) String countryName ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(countryLength +", "+countryName +", "+" is/are the input to perform SQLi", Dummy_before_2626.sendRequest(conn, countryLength ,countryName ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3467_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3467.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_297_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_297.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3037_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_3037.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3522_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3522.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_278_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_278.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_782_test(@From(SqlInjectonGenerator.class) String email ,@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(email +", "+name +", "+" is/are the input to perform SQLi", Dummy_before_782.sendRequest(conn, email ,name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3172_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3172.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_628_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_628.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3488_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3488.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2333_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2333.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2763_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2763.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2299_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2299.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_501_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_501.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1266_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1266.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_151_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_151.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1636_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1636.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2919_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2919.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_852_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_852.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_917_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_917.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_444_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_444.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1323_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1323.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1289_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1289.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1773_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1773.sendRequest(conn, rand3 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3021_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_3021.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_281_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_281.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3471_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3471.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2630_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2630.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2260_test(@From(SqlInjectonGenerator.class) String name ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(name +", "+" is/are the input to perform SQLi", Dummy_before_2260.sendRequest(conn, name ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2775_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2775.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2325_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2325.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1159_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1159.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3164_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3164.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_794_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_794.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1509_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1509.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_844_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_844.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1620_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1620.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_147_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_147.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1270_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1270.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_517_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_517.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1765_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1765.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3308_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3308.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1335_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1335.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_452_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_452.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2149_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2149.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_901_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_901.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2519_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2519.sendRequest(conn, rand2 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_18_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_18.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2237_test(@From(SqlInjectonGenerator.class) String rand8 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand8 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2237.sendRequest(conn, rand8 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2667_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2667.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1948_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1948.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_686_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_686.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3426_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3426.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3076_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3076.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_239_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_239.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3099_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3099.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_669_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_669.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3133_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_3133.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_393_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_393.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2372_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2372.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2688_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2688.sendRequest(conn, rand1 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2722_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2722.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1227_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1227.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_540_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_540.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2958_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2958.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1677_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1677.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_110_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_110.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_813_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_813.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_956_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_956.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1698_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1698.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1362_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1362.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_405_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_405.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1732_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1732.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1525_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1525.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3518_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3518.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_242_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_242.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1175_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1175.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3148_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3148.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_612_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_612.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2309_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2309.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2759_test(@From(SqlInjectonGenerator.class) String Date ,@From(SqlInjectonGenerator.class) String counter ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(Date +", "+counter +", "+" is/are the input to perform SQLi", Dummy_before_2759.sendRequest(conn, Date ,counter ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1876_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1876.sendRequest(conn, rand4 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1899_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1899.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1933_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1933.sendRequest(conn, rand4 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1460_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1460.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_307_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_307.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1030_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1030.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_757_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_757.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_887_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_887.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2535_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2535.sendRequest(conn, rand2 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_34_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_34.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2165_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2165.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_184_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_184.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3324_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3324.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1319_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1319.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2866_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2866.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1749_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1749.sendRequest(conn, rand2 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3261_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3261.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2889_test(@From(SqlInjectonGenerator.class) String id ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id +", "+" is/are the input to perform SQLi", Dummy_before_2889.sendRequest(conn, id ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2923_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2923.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_491_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_491.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2470_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2470.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_868_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_868.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2020_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2020.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1821_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1821.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1122_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_1122.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_645_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_645.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1088_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1088.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1572_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1572.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_215_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_215.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1067_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_1067.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_700_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_700.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1437_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_1437.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_350_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_350.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1964_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_1964.sendRequest(conn, rand5 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2831_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String salary ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+salary +", "+" is/are the input to perform SQLi", Dummy_before_2831.sendRequest(conn, id1 ,id2 ,salary ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_583_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_583.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_429_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_429.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3373_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_3373.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2132_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2132.sendRequest(conn, rand7 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2562_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2562.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_63_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_63.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2098_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2098.sendRequest(conn, rand6 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2077_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2077.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_995_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_995.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2427_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2427.sendRequest(conn, rand1 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2974_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+" is/are the input to perform SQLi", Dummy_before_2974.sendRequest(conn, id1 ,id2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3236_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3236.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_203_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_203.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1564_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1564.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_653_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_653.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3109_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3109.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1134_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1134.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2348_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2348.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1837_test(@From(SqlInjectonGenerator.class) String rand3 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand3 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1837.sendRequest(conn, rand3 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2718_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2718.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1972_test(@From(SqlInjectonGenerator.class) String rand5 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand5 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_1972.sendRequest(conn, rand5 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_346_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_346.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1421_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1421.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_716_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_716.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1071_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_1071.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_75_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_75.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2574_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2574.sendRequest(conn, rand0 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2124_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2124.sendRequest(conn, rand7 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1358_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1358.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3365_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_3365.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_595_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_595.sendRequest(conn, rand0 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1708_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1708.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2827_test(@From(SqlInjectonGenerator.class) String GPA ,@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(GPA +", "+ID +", "+" is/are the input to perform SQLi", Dummy_before_2827.sendRequest(conn, GPA ,ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3220_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3220.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2962_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String id2 ,@From(SqlInjectonGenerator.class) String id3 ,@From(SqlInjectonGenerator.class) String id4 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+id2 +", "+id3 +", "+id4 +", "+" is/are the input to perform SQLi", Dummy_before_2962.sendRequest(conn, id1 ,id2 ,id3 ,id4 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2431_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2431.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_983_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_983.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2061_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2061.sendRequest(conn, rand6 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_829_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_829.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1860_test(@From(SqlInjectonGenerator.class) String id1 ,@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+num +", "+" is/are the input to perform SQLi", Dummy_before_1860.sendRequest(conn, id1 ,num ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1499_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1499.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_604_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_604.sendRequest(conn, rand0 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1163_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_1163.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_254_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_254.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1533_test(@From(SqlInjectonGenerator.class) String rand0 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand0 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1533.sendRequest(conn, rand0 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_741_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_741.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1026_test(@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val1 +", "+" is/are the input to perform SQLi", Dummy_before_1026.sendRequest(conn, val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_311_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_311.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1476_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_1476.sendRequest(conn, rand1 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_1925_test(@From(SqlInjectonGenerator.class) String rand4 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand4 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_1925.sendRequest(conn, rand4 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2870_test(@From(SqlInjectonGenerator.class) String ID ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(ID +", "+" is/are the input to perform SQLi", Dummy_before_2870.sendRequest(conn, ID ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3298_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_3298.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3332_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_3332.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_468_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_468.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_192_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_192.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2173_test(@From(SqlInjectonGenerator.class) String rand7 ,@From(SqlInjectonGenerator.class) String val1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand7 +", "+val1 +", "+" is/are the input to perform SQLi", Dummy_before_2173.sendRequest(conn, rand7 ,val1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2489_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2489.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_22_test(@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(val2 +", "+" is/are the input to perform SQLi", Dummy_before_22.sendRequest(conn, val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2523_test(@From(SqlInjectonGenerator.class) String rand2 ,@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand2 +", "+var2 +", "+" is/are the input to perform SQLi", Dummy_before_2523.sendRequest(conn, rand2 ,var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_891_test(@From(SqlInjectonGenerator.class) String var2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var2 +", "+" is/are the input to perform SQLi", Dummy_before_891.sendRequest(conn, var2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2036_test(@From(SqlInjectonGenerator.class) String rand6 ,@From(SqlInjectonGenerator.class) String val2 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand6 +", "+val2 +", "+" is/are the input to perform SQLi", Dummy_before_2036.sendRequest(conn, rand6 ,val2 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2466_test(@From(SqlInjectonGenerator.class) String rand1 ,@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(rand1 +", "+var1 +", "+" is/are the input to perform SQLi", Dummy_before_2466.sendRequest(conn, rand1 ,var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_487_test(@From(SqlInjectonGenerator.class) String var1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(var1 +", "+" is/are the input to perform SQLi", Dummy_before_487.sendRequest(conn, var1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_2935_test(@From(SqlInjectonGenerator.class) String id1 ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(id1 +", "+" is/are the input to perform SQLi", Dummy_before_2935.sendRequest(conn, id1 ) == 0);
		if(conn != null)
			conn.close();
	}
	@Fuzz
	public void Dummy_before_3277_test(@From(SqlInjectonGenerator.class) String num ) throws SQLException, ClassNotFoundException {
		Connection conn = null;
		Class.forName("com.mysql.cj.jdbc.Driver");
		conn =  DriverManager.getConnection(DB_URL, DB_UN, DB_PW);
		assertTrue(num +", "+" is/are the input to perform SQLi", Dummy_before_3277.sendRequest(conn, num ) == 0);
		if(conn != null)
			conn.close();
	}
}